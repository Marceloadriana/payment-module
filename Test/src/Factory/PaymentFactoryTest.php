<?php

namespace Payment\Factory;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2020-06-16 at 15:28:51.
 */
class PaymentFactoryTest extends \PHPUnit\Framework\TestCase
{

    /**
     * Prepara o cenário para o teste.
     * @param \Payment\Wrapper\PaymentWrapper $gateway
     * @return \Payment\Wrapper\PaymentWrapper
     */
    private function prepareGatewayToTest(\Payment\Wrapper\PaymentWrapper $gateway)
    {
        $payer = $this->prophesize(\Payment\Generic\Payer::class);
        $payer->getName()->willReturn('Rodrigo Teixeira Andreotti');
        $payer->getDocument()->willReturn('318.819.868-02');
        $payer->getEmail()->willReturn('ro.andriotti@gmail.com');
        $payer->getPhone()->willReturn('(11) 98224-5506');
        
        
        $product1 = $this->prophesize(\Payment\Generic\ProductInterface::class);
        $product1->getId()->willReturn(1);
        $product1->getPrice()->willReturn(15.30);
        $product1->getDescription()->willReturn('Hospedagem de sites');
        $product1->getCount()->willReturn(1);

        $product2 = $this->prophesize(\Payment\Generic\ProductInterface::class);
        $product2->getId()->willReturn(2);
        $product2->getPrice()->willReturn(120.00);
        $product2->getDescription()->willReturn('Memória DDR4');
        $product2->getCount()->willReturn(2);

        $gateway->addProduct($product1->reveal());
        $gateway->addProduct($product2->reveal());
        
        $gateway->setPayer($payer->reveal());
        
        return $gateway;
    }
    
    /**
     * Testa se o factory cria pagamento com pagseguro
     * @covers Payment\Factory\PaymentFactory::createPaymentWrapper
     */
    public function testCreatePaymentWrapperForPagSeguro()
    {
        $config = require getcwd() . DIRECTORY_SEPARATOR . 'src' . DIRECTORY_SEPARATOR . 'config_file.php';
        
        
        $object = new PaymentFactory($config);
        
        $this->assertInstanceOf(PaymentFactory::class, $object);
        $gateway = $object->createPaymentWrapper(\Payment\Adapter\AdapterType::PAGSEGURO);
        $this->assertInstanceOf(\Payment\Wrapper\PaymentWrapper::class, $gateway);
        
        $this->prepareGatewayToTest($gateway);
        
        $paymentUrl = $gateway->pay();
        
        $this->assertContains('pagseguro', $paymentUrl);
    }
    
    
    /**
     * Testa se o factory cria pagamento com PayPal
     * @covers Payment\Factory\PaymentFactory::createPaymentWrapper
     */
    public function testCreatePaymentWrapperForPayPal()
    {
        $config = require getcwd() . DIRECTORY_SEPARATOR . 'src' . DIRECTORY_SEPARATOR . 'config_file.php';
        
        
        $object = new PaymentFactory($config);
        
        $this->assertInstanceOf(PaymentFactory::class, $object);
        $gateway = $object->createPaymentWrapper(\Payment\Adapter\AdapterType::PAYPAL);
        $this->assertInstanceOf(\Payment\Wrapper\PaymentWrapper::class, $gateway);
        
        $this->prepareGatewayToTest($gateway);
        
        $paymentUrl = $gateway->pay();
        var_dump($paymentUrl);
        
        $this->assertContains('paypal', $paymentUrl);
    }
    
    /**
     * Verifica se a exceção é lançada para pagamentos não suportados
     * @expectedException \Payment\Exception\PaymentMethodNotSupported
     */
    public function testCreatePaymentInvalid()
    {
        $config = require getcwd() . DIRECTORY_SEPARATOR . 'src' . DIRECTORY_SEPARATOR . 'config_file.php';
        
        
        $object = new PaymentFactory($config);
        
        $this->assertInstanceOf(PaymentFactory::class, $object);
        $gateway = $object->createPaymentWrapper('stripe');
        $this->assertInstanceOf(\Payment\Wrapper\PaymentWrapper::class, $gateway);
        
        $this->prepareGatewayToTest($gateway);
        
        $paymentUrl = $gateway->pay();
        
        $this->assertContains('stripe', $paymentUrl);
    }

}
